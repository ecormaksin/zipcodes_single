plugins {
	id 'java-library'
	id 'org.springframework.boot' version "${springBoot}"
	id 'io.spring.dependency-management' version "${dependencyManagement}"
	id "io.freefair.lombok" version "${lombokPluginVersion}"
}

group = 'com.example.zipcodes'
version = '1.0.0'
sourceCompatibility = JavaVersion.VERSION_1_8

bootJar {
    archiveFileName = "zipcodes.jar"
    layered()
}

sourceSets {
	main {
		java {
			srcDirs = ["$projectDir/src/main/java", "$projectDir/build/generated/sources/annotationProcessor/java/main"]
		}
	}
}

configurations {
	developmentOnly
	runtimeClasspath {
		extendsFrom developmentOnly
	}
	compileOnly {
		extendsFrom annotationProcessor
	}
	testAnnotationProcessor {
		extendsFrom annotationProcessor
	}
	testImplementation {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	api (
		"com.querydsl:querydsl-jpa:${queryDslVersion}"
	)
	implementation ("com.querydsl:querydsl-sql:${queryDslVersion}") {
		exclude group: 'joda-time', module: 'joda-time'
	}
	implementation (
        "org.springframework.boot:spring-boot-loader:${springBoot}",
		'org.springframework.boot:spring-boot-starter-data-jpa',
		'org.springframework.boot:spring-boot-starter-web',
		'org.springframework.cloud:spring-cloud-starter-vault-config',
		"javax.validation:validation-api:${validationApiVersion}",
        "com.fasterxml.jackson.core:jackson-databind:${jacksonBindVersion}",
        "com.ibm.icu:icu4j:${icu4jVersion}",
		"com.querydsl:querydsl-apt:${queryDslVersion}",
		"com.querydsl:querydsl-jpa:${queryDslVersion}",
		"joda-time:joda-time:${jodaTimeVersion}",
        "org.bgee.log4jdbc-log4j2:log4jdbc-log4j2-jdbc4.1:${log4jdbcLog4j2Jdbc41Version}",
        "org.glassfish:javax.el:${javaxElVersion}",
        "org.mapstruct:mapstruct:${mapStructVersion}"
	)
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly (
		"org.hibernate.validator:hibernate-validator:${hibernateValidatorVersion}",
		files(
            'libs/ojdbc8.jar',
            'libs/ucp.jar',
            'libs/oraclepki.jar',
            'oracle.osdt/osdt_core.jar',
            'oracle.osdt/osdt_cert.jar'
        )
	)
	annotationProcessor (
        "org.springframework:spring-context-indexer:${springContextIndexer}",
		'org.springframework.boot:spring-boot-configuration-processor',
        "com.querydsl:querydsl-apt:${queryDslVersion}:jpa",
		"javax.persistence:javax.persistence-api",
		"javax.annotation:javax.annotation-api",
        "org.mapstruct:mapstruct-processor:${mapStructVersion}"
	)
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
}

compileJava {
    options.compilerArgs = [
        '-Amapstruct.suppressGeneratorTimestamp=true',
        '-Amapstruct.suppressGeneratorVersionInfoComment=true',
        '-Amapstruct.defaultComponentModel=spring'
    ]
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

test {
	useJUnitPlatform()
}
